jobs:
  LibHyps:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target LibHyps
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"LibHyps\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho ::set-output name=status::$(echo $nb_dry_run | grep\
        \ \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "LibHyps"
  bignums:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target bignums
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"bignums\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho ::set-output name=status::$(echo $nb_dry_run | grep\
        \ \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "bignums"
  coq:
    needs: []
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target coq
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"coq\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho ::set-output name=status::$(echo $nb_dry_run | grep\
        \ \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
  coqprime:
    needs:
    - coq
    - bignums
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target coqprime
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"coqprime\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho ::set-output name=status::$(echo $nb_dry_run | grep\
        \ \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: bignums'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "bignums"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coqprime"
  equations:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target equations
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"equations\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho ::set-output name=status::$(echo $nb_dry_run | grep\
        \ \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "equations"
  gaia:
    needs:
    - coq
    - mathcomp-ssreflect
    - mathcomp-algebra
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target gaia
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"gaia\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho ::set-output name=status::$(echo $nb_dry_run | grep\
        \ \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "gaia"
  gaia-hydras:
    needs:
    - coq
    - hydra-battles
    - gaia
    - mathcomp-zify
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target gaia-hydras
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"gaia-hydras\" \\\n   --dry-run 2>&1 >\
        \ /dev/null)\necho $nb_dry_run\necho ::set-output name=status::$(echo $nb_dry_run\
        \ | grep \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: hydra-battles'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "hydra-battles"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: gaia'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "gaia"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-zify'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "mathcomp-zify"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "gaia-hydras"
  goedel:
    needs:
    - coq
    - hydra-battles
    - coqprime
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target goedel
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"goedel\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho ::set-output name=status::$(echo $nb_dry_run | grep\
        \ \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: hydra-battles'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "hydra-battles"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coqprime'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coqprime"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "goedel"
  hydra-battles:
    needs:
    - coq
    - equations
    - LibHyps
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target hydra-battles
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"hydra-battles\" \\\n   --dry-run 2>&1\
        \ > /dev/null)\necho $nb_dry_run\necho ::set-output name=status::$(echo $nb_dry_run\
        \ | grep \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: LibHyps'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "LibHyps"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "hydra-battles"
  hydra-battles-single:
    needs:
    - coq
    - serapi
    - coqprime
    - equations
    - gaia
    - LibHyps
    - mathcomp-ssreflect
    - mathcomp-algebra
    - mathcomp-zify
    - paramcoq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target hydra-battles-single
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"hydra-battles-single\" \\\n   --dry-run\
        \ 2>&1 > /dev/null)\necho $nb_dry_run\necho ::set-output name=status::$(echo\
        \ $nb_dry_run | grep \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: serapi'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "serapi"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coqprime'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coqprime"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: gaia'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "gaia"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: LibHyps'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "LibHyps"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-zify'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "mathcomp-zify"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: paramcoq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "paramcoq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "hydra-battles-single"
  mathcomp-algebra:
    needs:
    - coq
    - mathcomp-ssreflect
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp-algebra
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"mathcomp-algebra\" \\\n   --dry-run 2>&1\
        \ > /dev/null)\necho $nb_dry_run\necho ::set-output name=status::$(echo $nb_dry_run\
        \ | grep \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "mathcomp-algebra"
  mathcomp-ssreflect:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp-ssreflect
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"mathcomp-ssreflect\" \\\n   --dry-run\
        \ 2>&1 > /dev/null)\necho $nb_dry_run\necho ::set-output name=status::$(echo\
        \ $nb_dry_run | grep \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "mathcomp-ssreflect"
  mathcomp-zify:
    needs:
    - coq
    - mathcomp-algebra
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp-zify
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"mathcomp-zify\" \\\n   --dry-run 2>&1\
        \ > /dev/null)\necho $nb_dry_run\necho ::set-output name=status::$(echo $nb_dry_run\
        \ | grep \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "mathcomp-zify"
  paramcoq:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target paramcoq
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"paramcoq\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho ::set-output name=status::$(echo $nb_dry_run | grep\
        \ \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "paramcoq"
  serapi:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target serapi
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"default\" --argstr job \"serapi\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho ::set-output name=status::$(echo $nb_dry_run | grep\
        \ \"built:\" | sed \"s/.*/built/\")\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "default"
        --argstr job "serapi"
  build-doc:
    needs:
    - hydra-battles-single
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  if [ -z \"$merge_commit\" ]; then\n    echo \"tested_commit=${{\
        \ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n  else\n    echo\
        \ \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v14
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v10
      with:
        name: coq
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v10
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        name: coq-community
    - name: Cachix setup math-comp
      uses: cachix/cachix-action@v10
      with:
        name: math-comp
    - name: Retrieve prebuilt vo files
      run: |
        nix-shell --run "make Makefile.coq"
        nix-shell --run "cachedMake"
        nix-shell --run "make -t"
    - name: Build Alectryon snippets
      run: nix-shell --run "make -C doc/movies -j $(nproc) all"
    - name: Build coqdoc
      run: nix-shell --run "make -j $(nproc) html"
    - name: Compile LaTeX document
      run: nix-shell --run "make pdf SOURCE_DATE_EPOCH=$(date +%s)"
    - name: Extract PDF and Coqdoc
      run: |
        mkdir -p public/doc public/theories
        cp doc/hydras.pdf public/doc/
        cp -r theories/html public/theories/
    # Depending on whether we are on master or not, we deploy to
    # GitHub Pages or as an artifact
    - name: Deploy to GitHub pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: crazy-max/ghaction-github-pages@v2
      with:
        build_dir: public
        jekyll: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Deploy artifact
      if: github.event_name != 'push' || github.ref != 'refs/heads/master'
      uses: actions/upload-artifact@v2
      with:
        path: public

name: Nix CI for bundle default
'on':
  pull_request:
    paths:
    - .github/workflows/**
  pull_request_target:
    types:
    - opened
    - synchronize
    - reopened
  push:
    branches:
    - master
